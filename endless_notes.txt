TO REMEMBER:

*** infohash is the SHA1 hash of the info dictionary
from stackoverflow:
To get the infohash, bdecode the metafile, then it's simply "sha1(bencode(metadata['info']))" (i.e. bencode only the info dict again, then hash that).

*** netstat [-an] | grep <port_no>
shows listening interfaces filtered by port #

*** lsof | grep <port_no>
list of open files

*** ssh -X <hostname>
>hostname example: user@chromebox02
-X enables window display on the remote host
global variable is $DISPLAY
>echo $DISPLAY
>logout
to logout from ssh

*** to do: create a class or something that takes a torrent file and sends http request to the tracker for the peer list (group functions to this end)


TO FORGET:
***Qbittorrent
#Tracker is listening for HTTP requests on this port
embedded tracker running on port 9000

port used for incoming connections: 6881

***Transmission (client):
port used for incoming connections: 51413

Tracker URL: http://localhost:9000/announce

Possible trouble when I'm creating the string for the handshake (some numbers are numbers, some numbers are string ASCII codes) - use "pack" module for this and ask Christian if stuck

GET /announce?uploaded=0&ip=10.1.10.25&info_hash=5f2bd91d8AAAAAA99824a12ff6f5cddb41e22884&event=started&downloaded=0&peer_id=-SG00011234567890123&port=1060&left=7896542 HTTP/1.0

NEW MIND BLOWING DISCOVERY:

PEERS - all users who are connected to the tracker AND either have a part of the file, or have inquired about a file (meaning ~ they are about to connect to a peer and get the file)

SEEDERS - users who have the whole file

represent aggregated HAVE messages from peer as a map of what they do and don't have - use bitstring module
pip install bitstring

60199

Ex~@@O



-'F35#(
MMBitTorrent protocolHr;+"`-DE1350-cZyTmYX8XCd)

